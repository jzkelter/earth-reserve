to RED.prepare-deposit-receipt-for-trading [dr]
;; project investors run this once for each DR at the point of creation
  let node-aiv-estimate-history ts-create "node-estimated-value"
  table:put dr "node-aiv-estimate-history" node-aiv-estimate-history
  
  let expost-aiv-per-year-node-estimate ts-create "node-per-year-estimate"
  table:put dr "expost-aiv-per-year-node-estimate-history" expost-aiv-per-year-node-estimate
  
  let expost-aiv-per-year-owner-estimate ts-create "owner-per-year-estimate"
  table:put dr "expost-aiv-per-year-owner-estimate-history" expost-aiv-per-year-owner-estimate
  
  let node-per-year-estimate table:get dr "node-estimated-aiv-per-year" ;; in node's currency
  RED.record-expost-aiv-per-year-node-estimate dr node-per-year-estimate
  
  let owner-per-year-estimate table:get dr "current-owner-estimated-aiv-per-year" ;; in node's currency
  RED.record-expost-aiv-per-year-owner-estimate dr owner-per-year-estimate
end

to RED.update-expost-aiv-realized-so-far [dr]
;; observer runs this procedure to update ex-post aiv realized so far, called in RED.update-deposit-receipts
  table:put dr "expost-aiv-realized-so-far" (table:get dr "expost-aiv-realized-so-far") + (table:get dr "expost-aiv-per-year") ;; in node's currency
end

to RED.record-expost-aiv-per-year-node-estimate [dr new-per-year-estimate]
;; project invesors run this, once at the start then again if there are anomalies
  table:put dr "expost-aiv-per-year-node-estimate-history" ts-add-row (table:get dr "expost-aiv-per-year-node-estimate-history") (sentence TIME-NOW new-per-year-estimate)
end

to RED.record-expost-aiv-per-year-owner-estimate [dr new-per-year-estimate]
;; project investors run this, once at the start, if there are anomalies, and every time the DR changes owners
  table:put dr "expost-aiv-per-year-owner-estimate-history" ts-add-row (table:get dr "expost-aiv-per-year-owner-estimate-history") (sentence TIME-NOW new-per-year-estimate)
end

;; later might need to reestimate remaining aiv (instead of sticking with initial per year estimate)

to RED.record-node-aiv-history [dr new-node-aiv-estimate]
;; project investors run this procedure
  table:put dr "node-aiv-estimate-history" ts-add-row (table:get dr "node-aiv-estimate-history") (sentence TIME-NOW new-node-aiv-estimate)
end

to RED.go [deposit-receipt-list]
;; the observer runs this procedure
  foreach ALL-DEPOSIT-RECEIPTS [dr -> 
    table:put dr "in-transaction?" true
  ]
  ask proj-investors [
    RED.transact deposit-receipt-list
  ]
end

to RED.update-deposit-receipts 
;; the observer runs this procedure
  foreach ALL-DEPOSIT-RECEIPTS [ dr ->
    let carry-start-date table:get dr "carry-start-date"
    let carry-end-date table:get dr "carry-end-date"
    table:put dr "time-held" (12 * time:difference-between carry-start-date TIME-NOW "years") + time:difference-between carry-start-date TIME-NOW "months" ;; this is in months overall
    let time-held table:get dr "time-held"
    if time-held > 0 and time-held mod 12 = 0 [
      RED.update-expost-aiv-realized-so-far dr
    ]
  ]
end

to RED.check-auto-node-redeem
;; project investors run this procedure
  foreach deposit-receipts [ dr ->
    let time-held table:get dr "time-held"
    (ifelse 
      time:is-equal TIME-NOW table:get dr "carry-end-date" [
        ;; does the node still need to update estimate first?
        RED.redeem-deposit-receipt dr RED.node-latest-estimate dr
      ]
      RED.node-latest-estimate dr >= table:get dr "market-price" [ ;; market price is in node's currency and so is node's latest estimate
        RED.redeem-deposit-receipt dr RED.node-latest-estimate dr
      ]
    )
  ]
end

to RED.check-if-owner-wants-to-redeem
;; project investors run this procedure which checks if it is the anniversary month of a deposit receipt
;; and runs further procedures if this is the case
  foreach deposit-receipts [ dr ->
    let time-held table:get dr "time-held"
    if time-held > 1 and time-held mod 12 = 0 [
      RED.reassess-aiv-value-and-maybe-redeem dr
    ] 
  ]
end


to RED.reassess-aiv-value-and-maybe-redeem [dr]
;; project investors run this procedure but both parties reassess here
  let years-passed (table:get dr "time-held") / 12
  let owner-per-year-estimate ts-get table:get dr "expost-aiv-per-year-owner-estimate-history" TIME-NOW "owner-per-year-estimate" ;; in node's currency
  let node-per-year-estimate ts-get table:get dr "expost-aiv-per-year-node-estimate-history" TIME-NOW "node-per-year-estimate"    ;; in node's currency
  let time-remaining (75 - years-passed)
  let expost-aiv-realized table:get dr "expost-aiv-realized-so-far" ;; in node's currency
  
  let owner-remaining-aiv-estimate (time-remaining) * owner-per-year-estimate ;; in node's currency
  let node-remaining-aiv-estimate (time-remaining) * node-per-year-estimate   ;; in node's currency
  
  let current-owner-aiv-estimate precision (expost-aiv-realized + owner-remaining-aiv-estimate) 2 ;; in node's currency
  let current-node-aiv-estimate precision (expost-aiv-realized + node-remaining-aiv-estimate) 2   ;; in node's currency
  
  table:put dr "current-owner-estimated-aiv" current-owner-aiv-estimate
  table:put dr "node-estimated-aiv" current-node-aiv-estimate
  
  RED.record-node-aiv-history dr table:get dr "node-estimated-aiv"
  
  let current-market-price table:get dr "market-price" ;; in node's currency
  let cost-of-carry (tax-rate * current-market-price) * (time-remaining) ;; in node's currency
  
  if (current-owner-aiv-estimate - cost-of-carry) <= current-node-aiv-estimate [
    RED.redeem-deposit-receipt dr current-node-aiv-estimate
  ]
end

to-report RED.FA-assess-aiv-value [dr]
;; project investors run this procedure
  let years-passed (table:get dr "time-held") / 12
  let time-remaining (75 - years-passed)
  let expost-aiv-realized table:get dr "expost-aiv-realized-so-far"
  let expost-aiv-realized-per-year 0
  if years-passed > 0 [ set expost-aiv-realized-per-year (expost-aiv-realized / years-passed) ] 
  let my-per-year-estimate precision (random-normal expost-aiv-realized-per-year abs (expost-aiv-realized-per-year / 3)) 2 
  
  let my-remaining-aiv-estimate (time-remaining) * my-per-year-estimate
  let my-aiv-estimate precision (expost-aiv-realized + my-remaining-aiv-estimate) 2 
  
  let cost-of-carry (tax-rate * my-aiv-estimate) * (time-remaining) ;; because if this FA buys they will declare their estimate as market price
  report (list my-aiv-estimate (my-aiv-estimate - cost-of-carry)) ;; both in node's currency
end


;to-report RED.node-assess-aiv-value [dr] ;; not getting used right now
;  let years-passed (table:get dr "time-held") / 12
;  let time-remaining (75 - years-passed)
;  let expost-aiv-realized table:get dr "expost-aiv-realized-so-far"
;  let node-per-year-estimate ts-get table:get dr "expost-aiv-per-year-node-estimate-history" TIME-NOW "node-per-year-estimate"
;  let node-remaining-aiv-estimate (time-remaining) * node-per-year-estimate
;  let current-node-aiv-estimate precision (expost-aiv-realized + node-remaining-aiv-estimate) 2
;  report current-node-aiv-estimate
;end
  

to-report RED.node-latest-estimate [dr]
  report ts-get table:get dr "node-aiv-estimate-history" TIME-NOW "node-estimated-value"
end

to RED.transact [dep-receipts] ;; takes all-deposit-receipts as input, a list of DRs
;; project investors run this procedure to potentially buy a DR from the market
  let current-turtle self
  
  let potential-dep-receipts filter [dr -> (table:get dr "market-price") < PI-total-cash-held-in-ref table:get dr "currency" 
                                            and (table:get dr "in-transaction?") = true 
                                            and (table:get dr "owner") != current-turtle] dep-receipts
  let subset-potential-dep-receipts up-to-n-of n-drs-checked potential-dep-receipts
  
  let best-profit-so-far 0
  let best-profit-dr (list)
  
  foreach subset-potential-dep-receipts [dr ->
    let current-price table:get dr "market-price" ;; in node's currency
    let estimation-result RED.FA-assess-aiv-value dr
    let my-profit-estimate item 1 estimation-result ;; in node's currency
    let my-aiv-estimate item 0 estimation-result    ;; in node's currency
    
    if my-profit-estimate > best-profit-so-far [
      set best-profit-so-far my-profit-estimate
      set best-profit-dr (list dr current-price my-profit-estimate my-aiv-estimate) ;; all in node's currency
    ]
  ]
  
  if best-profit-dr != (list) [
    let min-roi-wanted 1.1 ;; can be variable later
    let dr item 0 best-profit-dr 
    let current-price item 1 best-profit-dr          ;; in node's currency
    let new-owner-aiv-estimate item 3 best-profit-dr ;; in node's currency
    if (item 2 best-profit-dr) / current-price > min-roi-wanted [
      let node-currency table:get dr "currency"
      let owner-home-currency [home-currency] of current-turtle
      subtract-from-cash-holdings node-currency current-price
      
      let monthly-tax-for-new-owner precision ((new-owner-aiv-estimate * tax-rate) / 12) 4 ;; in node's currency
      let monthly-tax-for-new-owner-in-own-currency convert-currency node-currency owner-home-currency monthly-tax-for-new-owner
      set ERA-monthly-tax-bill (ERA-monthly-tax-bill + monthly-tax-for-new-owner-in-own-currency) ;; in owner's home currency

      set deposit-receipts fput dr deposit-receipts
      
      ask table:get dr "owner" [ ;; old owner this FA is buying the DR from     
        add-to-cash-holdings node-currency current-price
        
        let monthly-tax-for-old-owner precision ((table:get dr "market-price" * tax-rate) / 12) 4
        let monthly-tax-for-old-owner-in-own-currency convert-currency node-currency [home-currency] of table:get dr "owner" monthly-tax-for-old-owner
        set ERA-monthly-tax-bill (ERA-monthly-tax-bill - monthly-tax-for-old-owner-in-own-currency) ;; in old owner's home currency
        if ERA-monthly-tax-bill < 0 [ set ERA-monthly-tax-bill 0 ]
        set deposit-receipts remove dr deposit-receipts
      ]
      
      table:put dr "owner" current-turtle
      table:put dr "market-price" new-owner-aiv-estimate ;; in node's currency
    
      let new-owner-per-year-estimate precision ((table:get dr "market-price") / 75) 2
      RED.record-expost-aiv-per-year-owner-estimate dr new-owner-per-year-estimate
    
      table:put dr "in-transaction?" false
    ]
  ]
end

to RED.redeem-deposit-receipt [deposit-receipt redemption-price]
;; project investors run this procedure to cash a deposit receipt in with a node
  let node-currency table:get deposit-receipt "currency"
  
  add-to-cash-holdings node-currency redemption-price
  
  let monthly-tax-on-dr precision ((table:get deposit-receipt "market-price" * tax-rate) / 12) 4
  let monthly-tax-on-dr-in-own-currency convert-currency node-currency [home-currency] of table:get deposit-receipt "owner" monthly-tax-on-dr
  set ERA-monthly-tax-bill (ERA-monthly-tax-bill - monthly-tax-on-dr-in-own-currency)
  if ERA-monthly-tax-bill < 0 [ set ERA-monthly-tax-bill 0 ]
  set deposit-receipts remove deposit-receipt deposit-receipts
  set ALL-DEPOSIT-RECEIPTS remove deposit-receipt ALL-DEPOSIT-RECEIPTS ;; remove operation might be expensive computation, for optimization later
  
  let new-money-in-global-ref-currency convert-currency node-currency (global-ref-currency) redemption-price
  set TOTAL-AMOUNT-MONEY (TOTAL-AMOUNT-MONEY + new-money-in-global-ref-currency) 
end

to RED.pay-deposit-receipt-tax 
;; project investors run this procedure to pay taxes each tick (month)
  subtract-from-cash-holdings home-currency ERA-monthly-tax-bill
end
